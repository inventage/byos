type Query {
    allFilms(limit: Int, after: String, orderBy: [FilmOrder!], distinctOn: [Film_select_column!]): FilmConnection!
    filmById(where: FilmWhere): Film
    filmByIds(limit: Int, after: String, where: FilmWhere): FilmConnection!
    allActors(orderBy: [ActorOrder!]): [Actor!]!
    actorById(where: ActorWhere): Actor
    allCategories(limit: Int, after: String): CategoryConnection!
    allStores(limit: Int, after: String): StoreConnection!
    filmsByYear(limit: Int, after: String, release_year: Int): FilmConnection!
}

enum SortDirection {
    ASC
    DESC
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: String
}

type Film {
    film_id: ID!
    title: String!
    release_year: Int
    actors: [Actor!]!
    categories(first: Int, after: String): CategoryConnection!
    stores: StoreConnection!
    language: Language!
    original_language: Language
}

enum Film_select_column {
    description
    filmId
    languageId
    lastUpdate
    length
    originalLanguageId
    rating
    release_year
    rentalDuration
    rentalRate
    replacementCost
    specialFeatures
    title
}

input FilmWhere {
    film_id: Int_comparison_exp
    title: String_comparison_exp
    _and: [FilmWhere!]
    _not: FilmWhere
    _or: [FilmWhere!]
}

input OrderFilmsBy {
    film_id: SortDirection
    title: SortDirection
    release_year: SortDirection
}

input FilmOrder {
    film_id: orderByDirection
    title: orderByDirection
    release_year: orderByDirection
}

input ActorOrder {
    actor_id: orderByDirection
    last_name: orderByDirection
    first_name: orderByDirection
}

type FilmConnection {
    edges: [FilmEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type FilmEdge {
    node: Film!
    cursor: String!
}

type Actor {
    actor_id: ID!
    first_name: String!
    last_name: String!
    films(limit: Int, after: String, orderBy: OrderFilmsBy, release_year: Int): FilmConnection!
}

input ActorWhere {
    actor_id: Int_comparison_exp
    first_name: String_comparison_exp
    last_name: String_comparison_exp
    _and: [ActorWhere!]
    _not: ActorWhere
    _or: [ActorWhere!]
}

type Store {
    store_id: ID!
    films(limit: Int, after: String, orderBy: OrderFilmsBy): FilmConnection!
    inventories(limit: Int, after: String): InventoryConnection!
}

type StoreConnection {
    edges: [StoreEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type StoreEdge {
    node: Store!
    cursor: String!
}

type Language {
    language_id: ID!
    name: String!
}

type Inventory {
    inventory_id: ID!
    film: Film!
    # example where a intermediate type should be visible to the client
    # stock: Int!
}

type InventoryConnection {
    edges: [InventoryEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type InventoryEdge {
    node: Inventory!
    cursor: String!
}

type Category {
    category_id: ID!
    name: String!
    films(first: Int, after: String, orderBy: OrderFilmsBy): FilmConnection!
    parent_category: Category
    subcategories: CategoryConnection!
}

type CategoryConnection {
    edges: [CategoryEdge!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type CategoryEdge {
    node: Category!
    cursor: String!
}

input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _lt: Int
    _lte: Int
    _neq: Int
    _in: [Int]
}

input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String]
    _iregex: String
    _is_null: [Boolean]
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nin: [String]
    _regex: String
}

"Column ordering"
enum orderByDirection {
    asc
    desc
}